type Position @model(table: "positions", pk: "id") {
    id: ID!
    name: String!
    initial: Boolean!
    player0: Boolean! @col(name: "player_0")
    parity: Int!

    parityGameId: ID! @col(name: "fk_parity_game") @private
}

type Edge @model(table: "edges", pk: "id") {
    id: ID!
    name: String!
    source: Position! @relate(on: { from: "fk_source", to: "id" })
    target: Position! @relate(on: { from: "fk_target", to: "id" })

    parityGameId: ID! @col(name: "fk_parity_game") @private
    sourceId: ID! @col(name: "fk_source") @private
    targetId: ID! @col(name: "fk_target") @private
}

type ParityGame @model(table: "parity_games", pk: "id") {
    id: ID!
    name: String!
    description: String!
    positions: [Position]! @relate(on: { from: "id", to: "fk_parity_game" })
    edges: [Edge]! @relate(on: { from: "id", to: "fk_parity_game" })
}

type Query @sqlmancer(dialect: POSTGRES) {
    parityGames: [ParityGame!]!
}

type Mutation @sqlmancer(dialect: POSTGRES) {
    createParityGame(name: String!, description: String!): ParityGame!
    updateParityGame(parityGameId: ID!, name: String, description: String!): ParityGame!
    deleteParityGame(parityGameId: ID!): Boolean!

    createPosition(parityGameId: ID!, name: String!, initial: Boolean!, player0: Boolean!, parity: Int!): Position!
    updatePosition(positionId: ID!, name: String, initial: Boolean, player0: Boolean, parity: Int): Position!
    deletePosition(positionId: ID!): Boolean!

    createEdge(parityGameId: ID!, name: String!, sourceId: ID!, targetId: ID!): Edge!
    updateEdge(edgeId: ID!, name: String, sourceId: ID, targetId: ID): Edge!
    deleteEdge(edgeId: ID!): Boolean!
}